name: CI Pipeline
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: "0 6 1 * *" # Monthly dependency check on the 1st
# Permissions for security scanning
permissions:
  actions: read
  contents: read
  security-events: write
env:
  # Enhanced SSL certificate configuration for all environments
  SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
  CURL_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt
  SSL_CERT_DIR: /etc/ssl/certs
  REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt
  NIX_SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
  NIX_CONFIG: |
    experimental-features = nix-command flakes pipe-operators
    allow-import-from-derivation = true
    accept-flake-config = true
    # SSL/TLS Configuration
    ssl-cert-file = /etc/ssl/certs/ca-certificates.crt
    # Optimized substituters with faster mirrors first
    extra-substituters = https://cache.nixos.org https://nix-community.cachix.org https://cache.garnix.io https://nixpkgs-unfree.cachix.org https://pre-commit-hooks.cachix.org
    extra-trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g= nixpkgs-unfree.cachix.org-1:hqvoInulhbV4nJ9yJOEr+4wxhDV4xq2d1DK7S6Nqlt4= pre-commit-hooks.cachix.org-1:Pkk3Panw5AW24TOv6kz3PvLhlH8puAsJTBbOPmBo7Rc=
    # Performance optimizations
    max-jobs = auto
    cores = 0
    builders-use-substitutes = true
    # Reduce build log verbosity
    log-lines = 25
jobs:
  # Security and compliance checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.token != ''
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name != 'pull_request' && github.token != ''
        with:
          sarif_file: "trivy-results.sarif"
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        if: github.token != ''
        with:
          path: ./
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
        continue-on-error: true
  # Quick validation and linting (heavy builds handled by Garnix CI)
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup SSL certificates
        uses: ./.github/actions/setup-ssl
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            ${{ env.NIX_CONFIG }}
      - name: Run prek hooks
        run: |
          echo "Running prek hooks on all files..."
          nix develop --command prek run --all-files
          echo "‚úÖ All prek hooks passed"
      - name: Validate Fish shell configuration syntax
        run: |
          echo "üêü Checking fish shell configuration syntax..."

          # Find all .fish files
          FISH_FILES=$(find . -name "*.fish" -not -path "./.git/*")

          if [ -z "$FISH_FILES" ]; then
            echo "No .fish files found to validate"
            exit 0
          fi

          # Validate syntax for each fish file
          ERRORS=0
          for file in $FISH_FILES; do
            echo "Checking: $file"
            if ! nix run nixpkgs#fish -- --no-execute "$file"; then
              echo "‚ùå Syntax error in $file"
              ERRORS=$((ERRORS + 1))
            fi
          done

          if [ $ERRORS -gt 0 ]; then
            echo "‚ùå Found $ERRORS fish syntax errors"
            exit 1
          fi

          echo "‚úÖ All fish configurations have valid syntax"
      - name: Validate flake structure
        run: |
          echo "Validating flake metadata and structure..."
          nix flake metadata
          nix flake show
          echo "‚úÖ Flake structure is valid"
  # Dependency updates and maintenance
  maintenance:
    name: Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Setup SSL certificates
        uses: ./.github/actions/setup-ssl
      - name: Verify checkout
        run: |
          echo "=== Repository Checkout Verification ==="
          echo "Working directory: $(pwd)"
          echo "Checking for flake.nix:"
          if [ -f "flake.nix" ]; then
            echo "‚úÖ flake.nix found successfully"
          else
            echo "‚ùå flake.nix not found"
            exit 1
          fi
          echo "=== End Verification ==="
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            ${{ env.NIX_CONFIG }}
      - name: Update flake inputs
        run: |
          # Use --offline first to check current state, then update with retries
          nix flake update --commit-lock-file --accept-flake-config || {
            echo "Rate limited, waiting 60s..."
            sleep 60
            nix flake update --commit-lock-file --accept-flake-config
          }
      - name: Check for updates
        run: |
          git diff --exit-code || echo "Flake inputs updated"
      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        if: github.event_name == 'schedule'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update flake inputs"
          title: "Automated dependency update"
          body: |
            ## Automated Dependency Update

            This PR updates the flake inputs to their latest versions.

            - Created by GitHub Actions
            - Triggered by scheduled workflow
            - Please review changes before merging
          branch: automated-updates
          delete-branch: true
  # Deployment readiness check
  deployment:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deployment status
        run: |
          echo "‚úÖ All checks passed - configurations are ready for deployment"
          echo "üöÄ NixOS configurations can be deployed to target systems"
          echo "Note: Full build validation is handled by Garnix CI"
